[{"content":"Large language model pretraining is a very challenging task which requires very strong engineering and science skills. People tend to underestimate efforts needed to train a good large model like GPT3 etc. Most people imagine that they can get decent language models given enough computation resources. The fact is even today only OpenAI is providing LM APIs where people can freely play with and get good performances. In this blog, we\u0026rsquo;ll talk about pretraining from the whole pipeline: data sourcing, collection and processing, tokenization, architecture engineering and evaluation. Hopefully, it would be helpful for foundational model training practioners.\nData Data is crucial in any ML system. This is true to pretraining as well. As is shown in Gopher paper, a large, diverse and high-quality dataset is needed to train a good model. In the following table, it shows the datasets used in Gopher model training. Now we\u0026rsquo;re looking at terabytes scale of training data.\nDatasets used in Gopher [2] An ensuing problem with large amount of data is that data quality is hard to control. In practice, we have to at least make sure the content should be intelligible. We might want to give more training on high-quality datasets such as books and wikipedia [31]. Diversified datasets are necessary but can't guarantee training success as can be seen from `Gopher` paper, model performs well on QA related tasks but suffers on reasoning task. What else is needed? We'll come back to this later. Tokenizer Language models compute probability of any string sequence. How to represent the string sequence is determined by tokenizer. Popular options are byte pair encoding (BPE) or wordpiece. As the majority of models are using BPE today, here we focus on BPE based tokenizer. Tokenizer can impact several things in LLM training: (1) a high compression rate (tokenized token numer vs raw token number, the lower the better). Compression rate affects input context length and inference speed. (2) Vocab size. An appropriately sized vocabulary to ensure adequate training of each word embedding.\nAs mentioned in GPT2 paper, BPE effectively interpolates between word level inputs for frequent symbol sequences and character level inputs for infrequent symbol sequences. Directly using greedy method to build BPE merging rules can be problematic. For example, word cat can be used in a lot of places like cat?, cat!, cat.. One way to solve this issue is to prevent BPE from generating rules across different character categories (letters, digits, puncts etc).\nAs people are pivoting in-context learing/instruction learning with large models, tokenization efficiency becomes more important. The following tables from Jurassic-1 paper shows the efficiency of tokenizer on several public dataset.\nTokenizer efficiency comparison from [16] Tokenizer determines the size of vocab. Usually when we support multilinguality and code data, the vocab size will be much larger. However, this is not always the case. CodeLLaMa shows very good performance (onpar with GPT4) with a vocab size of 32k.\nCompression rate determines the input sequence length to the model. With high compression rate, the input length is shorter. Short sequence length might be able to mitigate exposure bias to some extent.\nOpen tokenizer implementations are: tiktoken.\nModel Architecture All pretrained models are variant of original transformer model. The differences are mainly about it\u0026rsquo;s encoder-decoder architecture or decoder-only architecture. First of all, let\u0026rsquo;s take a look at the choices of available large models.\n| Models | Model Size | Token Size | Architecture | |\u0026mdash;-|:\u0026mdash;-:| :\u0026mdash;-:| | GPT3 | 175B | 300B | Decoder | | OPT | 175B| 300B | Decoder | | PaLM | 540B| 780B | Decoder | | Gopher | 280B| 300B | Decoder | | Chinchilla | 70B| 1400B | Decoder | | Jurassic-1 | 178B| - | Decoder | | Megatron-Turing NLG | 530B| 270B | Decoder | | LaMDA | 137B| 2810B | Decoder | {:.mbtablestyle} Although all models listed here are autoregressive decoder only model, they actually differ a bit inside the decoder. For instance, to speed up inference time, PaLM is using multi-query attention. Normally, in mutlhead attention, there will be h heads each with a linear project layer for Q, K, V. With multiquery attention, instead of using h different linear project layers for K and V, we can share a single smaller linear project layer for K and a single linear projection layer for V for each head. Then, for different head layers, K and V will be the same. In this way, we can save memory IO and get better latency performance in incremental inference.\nA systematic study of transformer architecture is done in Ref [29]. Most of recent LLM architecture are following design from this paper.\nPeople usually call the embedding dim as the width of transformer and number of layers as the depth. There is a optimal depth-to-width allocation for a given self-attention network size as is shown in [34].\nTraining Design Most of today\u0026rsquo;s pretraining follow suits of a multi-stage and multi-task training. As is shown by Yao in [1], GPT series model is pretrained in such way as well.\nGPT Model Lineage. Image from [1] From the lineage diagram, we can see that ChatGPT model comes from Codex model which can be seen as a different stage of training. The way of scheduling tasks and data during training can have great impact on the final model performance.\nBatch Size Research [5] shows that there is a critical batch size in pretraining. When training batch size exceeds critical batch size, model performance starts to degrade. Critical batch size is independent of model size and is related to loss.\nGenerally small batch size leads to better validation loss when training with the same number of tokens as more random movement of gradient explores more of loss landscape. Often times, small batch size gives better genelization performance as well as pointed out in [27]. The reason given from the paper is that smaller batch size usually converges to flat minimum as oppose to sharp minimum. Intuitively, this is related to graident update in each step is small for large batch size training.\nFlat and Sharp Minima [27] Learning Rate Scheduling Usually as pointed out in [20], when we scale up batch size, we increase learning rate propotionally. However, when we increase model size (usually followed with batch size increase), the training tends to be more unstable. Thus, in reality, we decrease maximum learning rate when we increase model size (batch size).\nLearning rate scheduling usually involves a (linear) warm-up step to maximum learning rate and followed by a decaying step to 0 or a minimum learning rate. Currently, there are several methods in literature for the decaying step:\nLinear scheduler Plateau-linear schedule Cosine scheduler Regularization One of the most used regularization method is L2 regularization, aka, weight decay [28]. For instance, GPT 3 training uses a weight decay of 0.1. Note that comparing with traditional neural network tuning weight decay number (such as 0.01) GPT3 weight decay is pretty large.\nLength Extrapolation As in-context learning becomes popular, people are asking a question, Can an LLM maintain equally good, if not better, perplexities when longer sequences are used during inference time? This is the so-called length extrapolation [25].\nOptimizer When we select an optimizer, we have to take consideration of memory footprint and stability issues etc. Options are Adafactor, Adam etc. According to Gopher paper, adafactor optimizer has smaller memory footprint, and on smaller scale model (\u0026lt;7B) adafactor works well. However, when model size goes larger, performance suffers because of stability issue.\nEvaluation A lot of large models come out every year and many claims that they could beat GPT3 model in a wide range of benchmarks like SuperGlue, CLUE, MMLU etc. However, when you do benchmark these models in zero-shot setting or some less common tasks (but still very reasonable ones), these models tend to perform really bad. I personally tested GPT3 model (175b) and UL2 model (20b) on text2sql and sql2text task, GPT3 gives way better performance to the extent that you\u0026rsquo;ll believe UL2 is like garbage. The similar thing happened in evaluation in [24]. You may argue that the model size differs a lot. However, we can think the other way around: the results they claim better than GPT3 is also got from a smaller model and maybe their model training is not easy/efficient to scale to such level. Essentially, what I want to say is that good performance on popular benchmark datasets doesn\u0026rsquo;t mean much for large LM pretraining as this is highly related to source of training data, whether or not doing fine-tuning, proper prompting etc. Human evaluation is what really matters.\nStability During the model training, the most commonly seen issue is gradient exploding, aka, gradient becomes NaN. As layers go deeper, this problem happens more often because the way backpropagation works. Over the years, people have proposed many different ways to solve the challenge. As is shown in paper [21], the post-LN shows stability issue without carefully designed warming-up stage. As a result, they are proposing pre-LN to alleviate the problem.\nThe objective function for highly nonlinear deep neural networks often contains sharp nonlinearities in parameter space resulting from the multiplication of several parameters. These nonlinearities give rise to very high derivatives in some places. When the parameters get close to such a cliff region, a gradient descent update can catapult the parameters very far, possibly losing most of the optimization work that had been done [33].\nIt\u0026rsquo;s important to monitor stability during training. Common practice is to plot activation norm and gradient norm for each step. When these values spike, we know there is something wrong. It\u0026rsquo;s better than looking at loss curve only as loss explosion generally lags behind these two indicators. For instance, when there is bad data, we could have better gauge of when that happens and restart training from that point.\nAdept AI has a lengthy blog post talking about hardware error induced stability issue. The blog mentioned two ways to identify erroneous node(s):\nGrid search: partition nodes into groups and train model on each group in a deterministic way. Find the one that has different training loss curve. Parameter checksum check: for each data parallel run, check parameter checksum to see if they are the same to determine which stage might be wrong. Efficient Inference Inference speed determines product cost. Over the years, people have proposed various ways to improve inference speed. The multiquery attention mentioned above is one of these approaches. References [1] How does GPT Obtain its Ability? Tracing Emergent Abilities of Language Models to their Sources [2] Gopher: Scaling Language Models: Methods, Analysis \u0026amp; Insights from Training Gopher [3] UL2: Unifying Language Learning Paradigms [4] Bloom: Estimating the Carbon Footprint of BLOOM, a 176B Parameter Language Model [5] Scaling Laws for Neural Language Models [6] GPT: Improving Language Understanding by Generative Pre-Training [7] GPT2: Language Models are Unsupervised Multitask Learners [8] GPT3: Language Models are Few-Shot Learners [9] InstructGPT: Training language models to follow instructions with human feedback [10] WebGPT: Browser-assisted question-answering with human feedback [11] OPT: Open Pre-trained Transformer Language Models [12] OPT2: OPT-IML Scaling Language Model Instruction Meta Learning through the Lens of Generalization [13] PaLM: Scaling Language Modeling with Pathways [14] Flan-PaLM: Scaling Instruction-Finetuned Language Models [15] Chinchilla: Training Compute-Optimal Large Language Models [16] Jurassic-1: Technical details and evaluation. [17] Megatron-NLG: Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model [18] LaMDA: Language Models for Dialog Applications [19] Codex: Evaluating Large Language Models Trained on Code [20] Accurate, Large Minibatch SGD: Training ImageNet in 1 Hour [21] On Layer Normalization in the Transformer Architecture [22] GLM-130B: An Open Bilingual Pre-trained Model [23] T0: Multitask Prompted Training Enables Zero-Shot Task Generalization [24] https://zhuanlan.zhihu.com/p/590240010 [25] RoFormer: Enhanced Transformer with Rotary Position Embedding [26] Receptive Field Alignment Enables Transformer Length Extrapolation [27] On Large-Batch Training for Deep Learning: Generalization Gap and Sharp Minima [28] Decoupled Weight Decay Regularization [29] Do Transformer Modifications Transfer Across Implementations and Applications? [30] xFormers: A modular and hackable Transformer modelling library [31] LLaMA: Open and Efficient Foundation Language Models [32] What Language Model to Train if You Have One Million GPU Hours? [33] On the difficulty of training Recurrent Neural Networks [34] Limits to Depth-Efficiencies of Self-Attention [35] Baichuan LLM [36] Qwen LLM\n","permalink":"https://rich-junwang.github.io/en-us/posts/tech/large_scale_pretraining/","summary":"Large language model pretraining is a very challenging task which requires very strong engineering and science skills. People tend to underestimate efforts needed to train a good large model like GPT3 etc. Most people imagine that they can get decent language models given enough computation resources. The fact is even today only OpenAI is providing LM APIs where people can freely play with and get good performances. In this blog, we\u0026rsquo;ll talk about pretraining from the whole pipeline: data sourcing, collection and processing, tokenization, architecture engineering and evaluation. Hopefully, it would be helpful for foundational model training practioners. Data Data is crucial in any ML system. This is true to pretraining as well. As is shown in Gopher paper, a large, diverse and high-quality dataset is needed to train a good model. In the following table, it shows the datasets","title":"Large Scale Pretraining"},{"content":"1. 介绍 scan命令的作用和keys *的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用keys *这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找\nscan总共有这几种命令：scan、sscan、hscan、zscan，分别用于迭代数据库中的：数据库中所有键、集合键、哈希键、有序集合键，命令具体结构如下：\nscan cursor [MATCH pattern] [COUNT count] [TYPE type] sscan key cursor [MATCH pattern] [COUNT count] hscan key cursor [MATCH pattern] [COUNT count] zscan key cursor [MATCH pattern] [COUNT count] 2. scan scan cursor [MATCH pattern] [COUNT count] [TYPE type]，cursor表示游标，指查询开始的位置，count默认为10，查询完后会返回下一个开始的游标，当返回0的时候表示所有键查询完了\n127.0.0.1:6379[2]\u0026gt; scan 0 1) \u0026#34;3\u0026#34; 2) 1) \u0026#34;mystring\u0026#34; 2) \u0026#34;myzadd\u0026#34; 3) \u0026#34;myhset\u0026#34; 4) \u0026#34;mylist\u0026#34; 5) \u0026#34;myset2\u0026#34; 6) \u0026#34;myset1\u0026#34; 7) \u0026#34;mystring1\u0026#34; 8) \u0026#34;mystring3\u0026#34; 9) \u0026#34;mystring4\u0026#34; 10) \u0026#34;myset\u0026#34; 127.0.0.1:6379[2]\u0026gt; scan 3 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;myzadd1\u0026#34; 2) \u0026#34;mystring2\u0026#34; 3) \u0026#34;mylist2\u0026#34; 4) \u0026#34;myhset1\u0026#34; 5) \u0026#34;mylist1\u0026#34; MATCH可以采用模糊匹配找出自己想要查找的键，这里的逻辑是先查出20个，再匹配，而不是先匹配再查询，这里加上count 20是因为默认查出的10个数中可能不能包含所有的相关项，所以把范围扩大到查20个，我这里测试的键总共有15个\n127.0.0.1:6379[2]\u0026gt; scan 0 match mylist* count 20 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; TYPE可以根据具体的结构类型来匹配该类型的键\n127.0.0.1:6379[2]\u0026gt; scan 0 count 20 type list 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; 3. sscan sscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是集合类型的key\n127.0.0.1:6379[2]\u0026gt; sadd myset1 a b c d (integer) 4 127.0.0.1:6379[2]\u0026gt; smembers myset1 1) \u0026#34;d\u0026#34; 2) \u0026#34;a\u0026#34; 3) \u0026#34;c\u0026#34; 4) \u0026#34;b\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;d\u0026#34; 2) \u0026#34;c\u0026#34; 3) \u0026#34;b\u0026#34; 4) \u0026#34;a\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 match a 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;a\u0026#34; 4. hscan hscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是哈希类型的key\n127.0.0.1:6379[2]\u0026gt; hset myhset1 kk1 vv1 kk2 vv2 kk3 vv3 (integer) 3 127.0.0.1:6379[2]\u0026gt; hgetall myhset1 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 127.0.0.1:6379[2]\u0026gt; hscan myhset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 5. zscan zscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是有序集合类型的key\n127.0.0.1:6379[2]\u0026gt; zadd myzadd1 1 zz1 2 zz2 3 zz3 (integer) 3 127.0.0.1:6379[2]\u0026gt; zrange myzadd1 0 -1 withscores 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; 127.0.0.1:6379[2]\u0026gt; zscan myzadd1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; ","permalink":"https://rich-junwang.github.io/en-us/posts/tech/tech1/","summary":"1. 介绍 scan命令的作用和keys *的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用keys *这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找 scan总共有这几种命令：sca","title":"Redis scan命令学习"},{"content":"","permalink":"https://rich-junwang.github.io/en-us/posts/blog/blog/","summary":"","title":"Blog"},{"content":"Distributed infrastructure is a big and interesting topic. I don\u0026rsquo;t work on infrastructure side, but I run into the concepts a lot, so I create this blog to help me understand more about infrastructure.\nMost of today\u0026rsquo;s distributed framework involves three parts, collective communication, data loading and preprocessing and distributed scheduler. We\u0026rsquo;ll look into these three parts resepectively.\nCollective Communication We can start with point to point communication. Normally point to point communication refers to two processes communication and it\u0026rsquo;s one to one communication. Accordingly, collective communication refers to 1 to many or many to many communication. In distributed system, there are large amount of communications among the nodes.\nThere are some common communication ops, such as Broadcast, Reduce, Allreduce, Scatter, Gather, Allgather etc.\nBroadcast and Scatter Broadcast is to distribute data from one node to other nodes. Scatter is to distribute a portion of data to different nodes.\nMPI broadcast and scatter Reduce and Allreduce Reduce is a collections of ops. Specifically, the operator will process an array from each process and get reduced number of elements.\nMPI reduce MPI reduce Allreduce means that the reduce operation will be conducted throughout all nodes.\nMPI Allreduce ","permalink":"https://rich-junwang.github.io/en-us/posts/tech/distributed_training/","summary":"Distributed infrastructure is a big and interesting topic. I don\u0026rsquo;t work on infrastructure side, but I run into the concepts a lot, so I create this blog to help me understand more about infrastructure. Most of today\u0026rsquo;s distributed framework involves three parts, collective communication, data loading and preprocessing and distributed scheduler. We\u0026rsquo;ll look into these three parts resepectively. Collective Communication We can start with point to point communication. Normally point to point communication refers to two processes communication and it\u0026rsquo;s one to one communication. Accordingly, collective communication refers to 1 to many or many to many communication. In distributed system, there are large amount of communications among the nodes. There are some common communication ops, such as Broadcast, Reduce, Allreduce, Scatter, Gather, Allgather etc. Broadcast and Scatter Broadcast is to distribute data from one node to other nodes. Scatter is","title":"Distributed Training Infra"},{"content":"","permalink":"https://rich-junwang.github.io/en-us/posts/life/life/","summary":"","title":"Life"},{"content":"","permalink":"https://rich-junwang.github.io/en-us/posts/read/read/","summary":"","title":"Read"},{"content":"\u0026lt;div\u0026gt; 科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 \u0026lt;/div\u0026gt; ","permalink":"https://rich-junwang.github.io/en-us/posts/tech/tech/","summary":"\u0026lt;div\u0026gt; 科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代","title":"Tech"},{"content":"Git Git merge Suppose we\u0026rsquo;re on master branch, if we want to override the changes in the master branch with feature branch, we can use the following command\ngit merge -X theirs feature to keep the master branch changes:\ngit merge -X ours feature If we want to rebase of current branch onto the master, and want to keep feature branch\ngit rebase master -X theirs if we want to keep master branch changes over our feature branch, the\ngit rebase master -X ours To summarize, we can have the following table:\n\u0026nbsp; Currently on Command \u0026nbsp; \u0026nbsp; Strategy \u0026nbsp; \u0026nbsp; Outcome \u0026nbsp;master git merge feature \u0026nbsp; -Xtheirs \u0026nbsp; \u0026nbsp; Keep changes from feature branch master git merge feature -Xours keep changes from master branch \u0026nbsp;feature git rebase master \u0026nbsp; -Xtheirs \u0026nbsp; \u0026nbsp; Keep changes from feature branch feature git rebase master -Xours keep changes from master branch {:.mbtablestyle} #### Git Diff To check two branch difference, suppose we\u0026rsquo;re on branch1, then we can do,\ngit diff HEAD..master Delete a remote branch Delete a remote branch\ngit push origin -d remote_branch_name Git rebase To fixup, squash, edit, drop, reword and many other operations on the previous N commit:\ngit rebase -i HAED~N Git commit git commit --amend --no-edit Undo git add The simplest way to undo a git add is to use git reset. It removes staged file, but will keeop the local changes there.\ngit reset file_path Git check difference Use the following command to checkout COMMIT (commit hash) ancestor and COMMIT difference\ngit diff COMMIT~ COMMIT git diff HEAD~ HEAD Git rebase resolve conflicts Sometimes when we do git rebase and we have many commits, we have to resolve a lot of conflicts, which can be really frustrating. One quick way might be to squash commits first to have a single commit, then do rebase. Another way is what we describe below.\nFirst, checkout temp branch from feature branch and start a standard merge\ngit checkout -b temp git merge origin/master git commit -m \u0026#34;Merge branch \u0026#39;origin/master\u0026#39; into \u0026#39;temp\u0026#39;\u0026#34; You will have to resolve conflicts, but only once and only real ones. Then stage all files and finish merge. Then return to your feature branch and start rebase, but with automatically resolving any conflicts.\ngit checkout feature git rebase origin/master -X theirs Branch has been rebased, but project is probably in invalid state. We just need to restore project state, so it will be exact as on branch \u0026rsquo;temp\u0026rsquo;. Technically we just need to copy its tree (folder state) via low-level command git commit-tree. Plus merging into current branch just created commit.\ngit merge --ff $(git commit-tree temp^{tree} -m \u0026#34;Fix after rebase\u0026#34; -p HEAD) git branch -D temp More details is here: https://github.com/capslocky/git-rebase-via-merge. Thanks to the original author!\nFind Command The original post is here: https://www.baeldung.com/linux/find-exec-command\n1. Basics The find command is comprised of two main parts, the expression and the action. When we initially use find, we usually start with the expression part. This is the part that allows us to specify a filter that defines which files to select.\nA classic example would be:\n$ find Music/ -name *.mp3 -type f Music/Gustav Mahler/01 - Das Trinklied vom Jammer der Erde.mp3 Music/Gustav Mahler/02 - Der Einsame im Herbst.mp3 The action part in this example is the default action, -print. This action prints the resulting paths with newline characters in between. It’ll run if no other action is specified.\nIn contrast, the -exec action allows us to execute commands on the resulting paths. Let’s say we want to run the file command on the list of mp3 files we just found to determine their filetype. We can achieve this by running the following command:\n$ find Music/ -name *.mp3 -exec file {} \\; Music/Gustav Mahler/01 - Das Trinklied vom Jammer der Erde.mp3: Audio file with ID3 version 2.4.0, contains:MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, Stereo Let’s dissect the arguments passed to the -exec flag, which include: A command: file A placeholder: {} A command delimiter: ; Now we’ll walk through each of these three parts in-depth.\n2. The Command Any command that can be executed by our shell is acceptable here. We should note that this isn’t our shell executing the command, rather we’re using Linux’s exec directly to execute the command. This means that any shell expansion won’t work here, as we don’t have a shell. Another effect is the unavailability of shell functions or aliases.\nAs a workaround for our missing shell functions, we can export them and call bash -c with our requested function on our file. To see this in action, we’ll continue with our directory of Mahler’s mp3 files. Let’s create a shell function that shows the track name and some details about the quality:\nfunction mp3info() { TRACK_NAME=$(basename \u0026#34;$1\u0026#34;) FILE_DATA=$(file \u0026#34;$1\u0026#34; | awk -F, \u0026#39;{$1=$2=$3=$4=\u0026#34;\u0026#34;; print $0 }\u0026#39;) echo \u0026#34;${TRACK_NAME%.mp3} : $FILE_DATA\u0026#34; } If we try to run the mp3info command on all of our files, -exec will complain that it doesn’t know about mp3info:\nfind . -name \u0026#34;*.mp3\u0026#34; -exec mp3info {} \\; find: ‘mp3info’: No such file or directory As mentioned earlier, to fix this, we’ll need to export our shell function and run it as part of a spawned shell:\n$ export -f mp3info $ find . -name \u0026#34;*.mp3\u0026#34; -exec bash -c \u0026#34;mp3info \\\u0026#34;{}\\\u0026#34;\u0026#34; \\; 01 - Das Trinklied vom Jammer der Erde : 128 kbps 44.1 kHz Stereo 02 - Der Einsame im Herbst : 128 kbps 44.1 kHz Stereo 03 - Von der Jugend : 128 kbps 44.1 kHz Stereo Note that because some of our file names hold spaces, we need to quote the results placeholder.\n3. The Results Placeholder The results placeholder is denoted by two curly braces {}.\nWe can use the placeholder multiple times if necessary:\nfind . -name \u0026#34;*.mp3\u0026#34; -exec bash -c \u0026#34;basename \\\u0026#34;{}\\\u0026#34; \u0026amp;\u0026amp; file \\\u0026#34;{}\\\u0026#34; | awk -F: \u0026#39;{\\$1=\\\u0026#34;\\\u0026#34;; print \\$0 }\u0026#39;\u0026#34; \\; 01 - Das Trinklied vom Jammer der Erde.mp3 Audio file with ID3 version 2.4.0, contains MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, Stereo 02 - Der Einsame im Herbst.mp3 Audio file with ID3 version 2.4.0, contains MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, Stereo 03 - Von der Jugend.mp3 Audio file with ID3 version 2.4.0, contains MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, Stereo In the above example, we ran both the basename, as well as the file commands. To allow us to concatenate the commands, we spawned a separate shell, as explained above.\n4. The Delimiter We need to provide the find command with a delimiter so it’ll know where our -exec arguments stop. Two types of delimiters can be provided to the -exec argument: the semi-colon(;) or the plus sign (+). As we don’t want our shell to interpret the semi-colon, we need to escape it (;).\nThe delimiter determines the way find handles the expression results. If we use the semi-colon (;), the -exec command will be repeated for each result separately. On the other hand, if we use the plus sign (+), all of the expressions’ results will be concatenated and passed as a whole to the -exec command, which will run only once.\nLet’s see the use of the plus sign with another example:\n$ find . -name \u0026#34;*.mp3\u0026#34; -exec echo {} + ./Gustav Mahler/01 - Das Trinklied vom Jammer der Erde.mp3 ./Gustav Mahler/02 - Der Einsame im Herbst.mp3 ./Gustav Mahler/03 - Von der Jugend.mp3 ./Gustav Mahler/04 - Von der Schönheit.mp3 ./Gustav Mahler/05 - Der Trunkene im Frühling.mp3 ./Gustav Mahler/06 - Der Abschied.mp3 When running echo, a newline is generated for every echo call, but since we used the plus-delimiter, only a single echo call was made. Let’s compare this result to the semi-colon version:\n$ find . -name \u0026#34;*.mp3\u0026#34; -exec echo {} \\; ./Gustav Mahler/01 - Das Trinklied vom Jammer der Erde.mp3 ./Gustav Mahler/02 - Der Einsame im Herbst.mp3 From a performance point of view, we usually prefer to use the plus-sign delimiter, as running separate processes for each file can incur a serious penalty in both RAM and processing time.\nHowever, we may prefer using the semi-colon delimiter in one of the following cases:\nThe tool run by -exec doesn’t accept multiple files as an argument. Running the tool on so many files at once might use up too much memory. We want to start getting some results as soon as possible, even though it’ll take more time to get all the results. One of the commands I use often with is\nfind my_directory/ -type f -exec lfs hsm_restore {} \\; Xargs Command There are commands that only take input as arguments like cp, rm, echo etc. We can use xargs to convert input coming from standard input to arguements.\n$find . -type f -name \u0026#34;*.log\u0026#34; | xargs -n 1 echo rm rm ./log/file5.log rm ./log/file6.log -n 1 argument, xargs turns each line into a command of its own.\n-I option takes a string that gets replaced with the supplied input before the command executes. Commond choices are {} and %.\nfind ./log -type f -name \u0026#34;*.log\u0026#34; | xargs -I % mv % backup/ aws s3 ls --recursive s3://my-bucket/ | grep \u0026#34;my_test\u0026#34; | cut -d\u0026#39; \u0026#39; -f4 | xargs -I{} aws s3 rm s3://my-bucket/{} -P option specify the number of parallel processes used in executing the commands over the input argument list.\nThe command below parallelly encodes a series of wav files to mp3 format: $find . -type f -name \u0026lsquo;*.wav\u0026rsquo; -print0 |xargs -0 -P 3 -n 1 mp3 -V8\nWhen combining find with xargs, it\u0026rsquo;s usually faster than using exec mentioned above.\nrsync command When use the following command, be careful about the relative path. In this command, we\u0026rsquo;re using 16 processes.\nls /my_model/checkpoints/source_dir | xargs -n16 -P -I% rsync -aP % target_dir ","permalink":"https://rich-junwang.github.io/en-us/posts/tech/shell-commands/","summary":"Git Git merge Suppose we\u0026rsquo;re on master branch, if we want to override the changes in the master branch with feature branch, we can use the following command git merge -X theirs feature to keep the master branch changes: git merge -X ours feature If we want to rebase of current branch onto the master, and want to keep feature branch git rebase master -X theirs if we want to keep master branch changes over our feature branch, the git rebase master -X ours To summarize, we can have the following table: \u0026nbsp; Currently on Command \u0026nbsp; \u0026nbsp; Strategy \u0026nbsp; \u0026nbsp; Outcome \u0026nbsp;master git merge feature \u0026nbsp; -Xtheirs \u0026nbsp; \u0026nbsp; Keep changes from feature branch master git merge feature -Xours keep changes from master branch \u0026nbsp;feature git rebase master \u0026nbsp; -Xtheirs \u0026nbsp; \u0026nbsp; Keep changes from feature branch feature git","title":"Shell command for my reference"},{"content":"Modern large language model usually is trained with billions number of parameters and trillions number of tokens. With model size and training data at such scale, computation resource and memory footprint requirement is huge. How to effectively leverage GPU resources to speed up training is an important topic in language model pretraining. In this blog, we\u0026rsquo;ll dive deep into parallel training in recent distributed training paradigms.\nA lot of contents of here are from OpenAI, Nvidia, Deepspeed and bigscience blogs. We\u0026rsquo;ll first go through different parallelism techniques and then talk about how to combine them to maximize training efficiency.\nData Parallelism Data parallelism (DP) is the most straightforward way of parallel training. With data parallelism, model parameters and optimzer states are replicated across different workers. Data is partitioned into the same number of shards and each replicate of model is fed with one shard of data. Forward and backward computation is in parallel (simutaneously) and then there is a synchronization step where gradients are averaged across workers to update parameters. The DP computation can be summarized as the following three steps:\nEach machine computes local gradients given local inputs and a consistent global view of the parameters. LocalGrad_i = f(Inputs_i, Targets_i, Params) Sum up all the local gradients and distribute that sum to each machine, so there is a consistent global view of the gradients. GlobalGrad = all_reduce(LocalGrad_i) Each machine can now locally update the parameters and optimizer state under the assumption that the exact same calculation will happen on all machines. NewParams, NewOptimState = g(Params, OldOptimState, GlobalGrad) Pipeline Parallelism Pipeline parallelism (PP) is from model parallelism. Model parallelism is initially proposed to solve that challenge that one model can\u0026rsquo;t fit into one GPU. The idea is we can vertically slice model into different layers (e.g. one or more layers in transformer models) and put different layers in different GPUs. The issue with this method is that because sequential computation order of layers, if we feed single large batch data into one of the workers, all other workers are idle. This is the so-called bubble waiting time.\nTo solve the problem, we can reuse the data parallelism idea. Instead of feeding a single large batch into a model shard, we can partition data into small chunks. Each chunk of data goes through different model shards (workers) in a pipeline way. The following figure illustrates how this works.\nPipeline parallelism. image from [4] Tensor Parallelism The bottleneck of neural network training is compute. Among all the computation parts, the general matrix multiplication (GEMM) consumes the most of time. One way to parallize the matrix multiplication is to use matrix decomposition. Specifically, we can split a matrix into two or multiple parts based on row or column. Then we can aggregate results after the computation of each parts in the end. This is the core idea of tensor parallelism (TP).\nAs these three parallelism is orthogonal to each other, it\u0026rsquo;s easy to combine them together. The following diagram shows how to combine pipeline parallelism with data parallelism.\nCombination of pipeline parallelism and data parallelism. Image from Deepspeed tutorial ZeRO DP Zero Redundancy Optimizer (ZeRO) is an optimizied data parallelism proposed by Deepspeed team. The idea is instead of replicating the whole model, optimizer on each of workers, we can only store needed part.\nZero DP. Image from Deepspeed Parallelism in Megatron Megatron-LM and NeMo are the open source libraries from Nvidia for the distributed training. In these two libs, there are two constraints for the parallelism settings.\n- world_size = TP * PP * DP - global_batch_size % (PP * DP) == 0 Sequence Parallel For operations such as layer normation, the operation can be paralleized on the sequence dimension. Remember that layernorm is normalization over the feature dimenstion, ie. a token representation of 2048 will be normalized over 2048 numbers. In light of this, sequence parallel is proposed to reduce GPU memory consumption.\nSequence parallelism References [1] https://huggingface.co/blog/bloom-megatron-deepspeed [2] https://github.com/NVIDIA/NeMo [3] https://openai.com/blog/techniques-for-training-large-neural-networks/ [4] GPipe: Efficient Training of Giant Neural Networks using Pipeline Parallelism [5] Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism [6] https://www.deepspeed.ai/tutorials/pipeline/\n","permalink":"https://rich-junwang.github.io/en-us/posts/tech/parallelism/","summary":"Modern large language model usually is trained with billions number of parameters and trillions number of tokens. With model size and training data at such scale, computation resource and memory footprint requirement is huge. How to effectively leverage GPU resources to speed up training is an important topic in language model pretraining. In this blog, we\u0026rsquo;ll dive deep into parallel training in recent distributed training paradigms. A lot of contents of here are from OpenAI, Nvidia, Deepspeed and bigscience blogs. We\u0026rsquo;ll first go through different parallelism techniques and then talk about how to combine them to maximize training efficiency. Data Parallelism Data parallelism (DP) is the most straightforward way of parallel training. With data parallelism, model parameters and optimzer states are replicated across different workers. Data is partitioned into the same number of shards and each replicate of model is","title":"Parallelism in LLM Training"},{"content":"Keep SSH Connected There is always one issue that bothers me when using SSH to access server (e.g. EC2) which is that the ssh connection can disconnect very soon. I tried to make changes in the local ssh config: ~/.ssh/config\nHost remotehost HostName remotehost.com ServerAliveInterval 50 Then do a permission change\nchmod 600 ~/.ssh/config However, this doesn\u0026rsquo;t work for me on Mac, and I don\u0026rsquo;t know why. :(\nThen I tried to make changes on server side. In /etc/ssh/sshd_config, add or uncomment the following lines:\nClientAliveInterval 50 ClientAliveCountMax 10 Then restart or reload SSH server to help it recognize the configuration change\nsudo service ssh restart # for ubuntu linux sudo service sshd restart # for other linux dist Finally, log out and try to login again\nlogout This time it works! :)\nAdding SSH Public Key to Server Adding ssh public key to server sometimes can make the connections eaiser. The command is simple:\ncat ~/.ssh/id_ras.pub | ssh -i \u0026#34;my-keypair.pem\u0026#34; ubuntu@myserver \u0026#39;cat \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u0026#39; ","permalink":"https://rich-junwang.github.io/en-us/posts/tech/ssh/","summary":"Keep SSH Connected There is always one issue that bothers me when using SSH to access server (e.g. EC2) which is that the ssh connection can disconnect very soon. I tried to make changes in the local ssh config: ~/.ssh/config Host remotehost HostName remotehost.com ServerAliveInterval 50 Then do a permission change chmod 600 ~/.ssh/config However, this doesn\u0026rsquo;t work for me on Mac, and I don\u0026rsquo;t know why. :( Then I tried to make changes on server side. In /etc/ssh/sshd_config, add or uncomment the following lines: ClientAliveInterval 50 ClientAliveCountMax 10 Then restart or reload SSH server to help it recognize the configuration change sudo service ssh restart # for ubuntu linux sudo service sshd restart # for other linux dist Finally, log out and try to login again logout This time it works! :) Adding SSH Public Key to Server Adding","title":"SSH Connection"},{"content":"About Me\nName: Richard Wang occupation: Programmer, AI practitioner Sports: jogging, hiking ","permalink":"https://rich-junwang.github.io/en-us/about/","summary":"About Me Name: Richard Wang occupation: Programmer, AI practitioner Sports: jogging, hiking","title":"🙋🏻‍♂️About"}]